//SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import '@openzeppelin/contracts/access/Ownable.sol';
import './interfaces/ICollection.sol';

contract CryptoKombatMixer is Ownable {
    enum HeroEdition {
        EMPTY,
        GENESIS,
        EPIC,
        RARE,
        COMMON
    }

    mapping(HeroEdition => mapping(HeroEdition => uint256)) public mixerConfigs;
    mapping(uint256 => HeroEdition) public heroIdToEdition;
    mapping(HeroEdition => uint256[]) public editionToHeroIds;

    ICollection public collection;

    uint256 private constant DECIMAL_PRECISION = 3;
    uint256 private constant PERCENTS_SUM = 100 * 10**DECIMAL_PRECISION;
    uint256 private randomNonce = 0;

    // EVENTS
    event HeroesMixed(address indexed account, HeroEdition indexed editionIn, HeroEdition indexed editionOut, uint256 tokenId);
    event MixerConfigSet(HeroEdition indexed editionIn, HeroEdition[] indexed editionsOut, uint256[] indexed chances);
    event EditionToIdMappingSet(HeroEdition indexed edition, uint256[] indexed ids);
    event EditionToIdMappingAdded(HeroEdition indexed edition, uint256 indexed id);

    // CONSTRUCTOR
    constructor(address collection_) {
        require(collection_ != address(0), 'CryptoKombatMixer: Collection zero address');
        collection = ICollection(collection_);
    }

    // PUBLIC FUNCTIONS

    function mixHeroes(uint256[] memory _ids) external {
        require(_ids.length == 3, 'CryptoKombatMixer: Incorrect input length');
        require(isSameEditions(_ids), 'CryptoKombatMixer: Input editions are not same');

        uint256 randomValue = random();

        HeroEdition editionIn = heroIdToEdition[_ids[0]];
        _getOutcome(msg.sender, editionIn, randomValue);
    }

    // PRIVATE FUNCTIONS

    function _getOutcome(
        address account,
        HeroEdition editionIn,
        uint256 randomValue
    ) internal {
        uint256 randomChance = randomValue % PERCENTS_SUM;

        uint256 epicChance = mixerConfigs[editionIn][HeroEdition.EPIC];
        uint256 rareChance = mixerConfigs[editionIn][HeroEdition.RARE];
        uint256 commonChance = mixerConfigs[editionIn][HeroEdition.EPIC];

        HeroEdition editionOut = HeroEdition.EMPTY;

        if (randomChance <= epicChance) {
            editionOut = HeroEdition.EPIC;
        } else if (randomChance <= rareChance) {
            editionOut = HeroEdition.RARE;
        } else {
            editionOut = HeroEdition.COMMON;
        }
        uint256 randomIndex = randomValue % editionToHeroIds[editionOut].length;
        uint256 tokenId = editionToHeroIds[editionOut][randomIndex];

        require(collection.totalSupply(tokenId) + 1 < collection.maxSupply(tokenId), 'CryptoKombatMixer: Token at maxSupply');

        collection.mint(account, tokenId, 1, bytes('0x0'));

        emit HeroesMixed(account, editionIn, editionOut, tokenId);
    }

    function random() private returns (uint256) {
        randomNonce++;
        return uint256(keccak256(abi.encodePacked(block.number, block.timestamp, block.difficulty, _msgSender(), randomNonce)));
    }

    // Helper functions

    function isSameEditions(uint256[] memory _ids) internal view returns (bool) {
        HeroEdition _prevEdition = heroIdToEdition[_ids[0]];
        for (uint256 i = 1; i < _ids.length; i++) {
            HeroEdition _currentEdition = heroIdToEdition[_ids[0]];
            if (_prevEdition != _currentEdition) {
                return false;
            }
            _prevEdition = _currentEdition;
        }
        return true;
    }

    // Admin functions

    function setMixerConfig(
        HeroEdition _in,
        HeroEdition[] memory _out,
        uint256[] memory _chances
    ) external onlyOwner {
        require(_out.length == _chances.length, 'CryptoKombatMixer: Params length mismatch');

        uint256 sum;
        for (uint256 i = 0; i < _chances.length; i++) {
            sum += _chances[i];
            mixerConfigs[_in][_out[i]] = _chances[i];
        }

        require(sum <= PERCENTS_SUM, 'CryptoKombatMixer: Chances sum exceed 100%');

        emit MixerConfigSet(_in, _out, _chances);
    }

    function setEditionToIdMapping(HeroEdition _edition, uint256[] memory _ids) external onlyOwner {
        require(_edition != HeroEdition.EMPTY, 'CryptoKombatMixer: Cannot set ids for EMPTY edition');

        for (uint256 i = 0; i < _ids.length; i++) {
            heroIdToEdition[_ids[i]] = _edition;
        }
        editionToHeroIds[_edition] = _ids;

        emit EditionToIdMappingSet(_edition, _ids);
    }

    function addEditionToIdMapping(HeroEdition _edition, uint256 _id) external onlyOwner {
        require(_edition != HeroEdition.EMPTY, 'CryptoKombatMixer: Cannot set ids for EMPTY edition');

        heroIdToEdition[_id] = _edition;
        editionToHeroIds[_edition].append(_id);

        emit EditionToIdMappingAdded(_edition, _id);
    }
}
