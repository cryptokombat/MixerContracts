{
  "address": "0x9a7D7cAbF7219BeB709D8e5b8ff00763833F9E75",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "edition",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "EditionToIdMappingAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "edition",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "EditionToIdMappingSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "editionIn",
          "type": "uint8"
        }
      ],
      "name": "HeroesMixReverted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "editionIn",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "editionOut",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "HeroesMixSuceess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "MixRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "editionIn",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "enum CryptoKombatMixer.HeroEdition[]",
          "name": "editionsOut",
          "type": "uint8[]"
        },
        {
          "indexed": true,
          "internalType": "uint256[]",
          "name": "chances",
          "type": "uint256[]"
        }
      ],
      "name": "MixerConfigSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "_edition",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "addEditionToIdMapping",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnAllHeroes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "burnHeroesBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collection",
      "outputs": [
        {
          "internalType": "contract ICollection",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "editionToHeroIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "heroIdToEdition",
      "outputs": [
        {
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "mixHeroes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "mixRequests",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "editionIn",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mixerConfigExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mixerConfigs",
      "outputs": [
        {
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "edition",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "chance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoverAllHeroes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "recoverHeroes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "_edition",
          "type": "uint8"
        },
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "setEditionToIdMapping",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CryptoKombatMixer.HeroEdition",
          "name": "_in",
          "type": "uint8"
        },
        {
          "internalType": "enum CryptoKombatMixer.HeroEdition[]",
          "name": "_out",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_chances",
          "type": "uint256[]"
        }
      ],
      "name": "setMixerConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf9aa8d2ed48d599983637010fe778d2daac7ad0a3d60c99d677f3ae6deedc9b",
  "receipt": {
    "to": null,
    "from": "0x6eFF8897098F418913341d606231f7Cbce1910Dd",
    "contractAddress": "0x9a7D7cAbF7219BeB709D8e5b8ff00763833F9E75",
    "transactionIndex": 452,
    "gasUsed": "2680125",
    "logsBloom": "0x
    "blockHash": "0xe61f29786dd0fb166da2046ebf836593c22ba09e99f8b69ba762572b4ee3e257",
    "transactionHash": "0xcf9aa8d2ed48d599983637010fe778d2daac7ad0a3d60c99d677f3ae6deedc9b",
    "logs": [
      {
        "transactionIndex": 452,
        "blockNumber": 12589418,
        "transactionHash": "0xcf9aa8d2ed48d599983637010fe778d2daac7ad0a3d60c99d677f3ae6deedc9b",
        "address": "0x9a7D7cAbF7219BeB709D8e5b8ff00763833F9E75",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006eff8897098f418913341d606231f7cbce1910dd"
        ],
        "data": "0x",
        "logIndex": 1389,
        "blockHash": "0xe61f29786dd0fb166da2046ebf836593c22ba09e99f8b69ba762572b4ee3e257"
      }
    ],
    "blockNumber": 12589418,
    "cumulativeGasUsed": "71097504",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x93e6f7264033dC2210919c4E3feE065313015109"
  ],
  "solcInputHash": "080a34560c4ae0e4476ddf8cbfaf7ff5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"edition\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"EditionToIdMappingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"edition\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"EditionToIdMappingSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"editionIn\",\"type\":\"uint8\"}],\"name\":\"HeroesMixReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"editionIn\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"editionOut\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"HeroesMixSuceess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"MixRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"editionIn\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"enum CryptoKombatMixer.HeroEdition[]\",\"name\":\"editionsOut\",\"type\":\"uint8[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"chances\",\"type\":\"uint256[]\"}],\"name\":\"MixerConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"_edition\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"addEditionToIdMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAllHeroes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"burnHeroesBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"contract ICollection\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"editionToHeroIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"heroIdToEdition\",\"outputs\":[{\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"mixHeroes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"mixRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"editionIn\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mixerConfigExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mixerConfigs\",\"outputs\":[{\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"edition\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"chance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverAllHeroes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"recoverHeroes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"_edition\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"setEditionToIdMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CryptoKombatMixer.HeroEdition\",\"name\":\"_in\",\"type\":\"uint8\"},{\"internalType\":\"enum CryptoKombatMixer.HeroEdition[]\",\"name\":\"_out\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_chances\",\"type\":\"uint256[]\"}],\"name\":\"setMixerConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CryptoKombatMixer.sol\":\"CryptoKombatMixer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x4716e860c041e651d2f2486399ea5a49ec12289e91b2763991a2fa3a70772acf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8c578d9e30c8f2bb7ac01d108766df87d42b73d4d3638f01d494a894fe7c1f4b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/CryptoKombatMixer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol';\\nimport './interfaces/ICollection.sol';\\n\\ncontract CryptoKombatMixer is ERC1155Holder, Ownable {\\n    enum HeroEdition {\\n        EMPTY,\\n        GENESIS,\\n        EPIC,\\n        RARE,\\n        COMMON\\n    }\\n\\n    struct MixRequest {\\n        address account;\\n        HeroEdition editionIn;\\n        uint256[] inIds;\\n    }\\n\\n    struct MixYield {\\n        HeroEdition edition;\\n        uint256 chance;\\n    }\\n\\n    mapping(HeroEdition => MixYield[]) public mixerConfigs;\\n    mapping(HeroEdition => bool) public mixerConfigExists;\\n    mapping(uint256 => HeroEdition) public heroIdToEdition;\\n    mapping(HeroEdition => uint256[]) public editionToHeroIds;\\n\\n    ICollection public collection;\\n\\n    address private constant DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n    uint256 private constant DECIMAL_PRECISION = 3;\\n    uint256 private constant PERCENTS_SUM = 100 * 10**DECIMAL_PRECISION;\\n    uint256 private randomNonce;\\n\\n    uint256 private mixRequestId;\\n\\n    mapping(bytes32 => MixRequest) public mixRequests;\\n\\n    // EVENTS\\n    event MixRequested(address indexed account, bytes32 indexed requestId);\\n    event HeroesMixSuceess(\\n        address indexed account,\\n        bytes32 indexed requestId,\\n        HeroEdition editionIn,\\n        HeroEdition editionOut,\\n        uint256 tokenId\\n    );\\n    event HeroesMixReverted(address indexed account, bytes32 indexed requestId, HeroEdition editionIn);\\n    event MixerConfigSet(HeroEdition indexed editionIn, HeroEdition[] indexed editionsOut, uint256[] indexed chances);\\n    event EditionToIdMappingSet(HeroEdition indexed edition, uint256[] indexed ids);\\n    event EditionToIdMappingAdded(HeroEdition indexed edition, uint256 indexed id);\\n\\n    // CONSTRUCTOR\\n    constructor(address collection_) {\\n        require(collection_ != address(0), 'CryptoKombatMixer: Collection zero address');\\n        collection = ICollection(collection_);\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    function mixHeroes(uint256[] memory _ids) external virtual {\\n        require(_ids.length == 3, 'CryptoKombatMixer: Incorrect input length');\\n        require(isSameEditions(_ids), 'CryptoKombatMixer: Input editions are not same');\\n        require(isConfigExists(heroIdToEdition[_ids[0]]), 'CryptoKombatMixer: Mixer config does not exist');\\n\\n        collection.safeBatchTransferFrom(msg.sender, address(this), _ids, _getFilledArray(_ids.length, 1), bytes('0x0'));\\n        //collection.burnBatch(msg.sender, _ids, _getFilledArray(3, 1));\\n        mixRequestId++;\\n        mixRequests[bytes32(mixRequestId)] = MixRequest({ account: msg.sender, editionIn: heroIdToEdition[_ids[0]], inIds: _ids });\\n\\n        emit MixRequested(msg.sender, bytes32(mixRequestId));\\n\\n        _getOutcome(bytes32(mixRequestId), random());\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    function _getOutcome(bytes32 requestId, uint256 randomValue) internal {\\n        MixRequest memory mixRequest = mixRequests[requestId];\\n\\n        HeroEdition editionOut = _getOutputEdition(mixRequest.editionIn, randomValue);\\n        uint256 tokenId = _getValidOutputTokenId(editionOut, randomValue);\\n\\n        if (tokenId > 0) {\\n            collection.mint(mixRequest.account, tokenId, 1, bytes('0x0'));\\n\\n            emit HeroesMixSuceess(mixRequest.account, requestId, mixRequest.editionIn, editionOut, tokenId);\\n        } else {\\n            collection.safeBatchTransferFrom(\\n                address(this),\\n                mixRequest.account,\\n                mixRequest.inIds,\\n                _getFilledArray(mixRequest.inIds.length, 1),\\n                bytes('0x0')\\n            );\\n            emit HeroesMixReverted(mixRequest.account, requestId, mixRequest.editionIn);\\n        }\\n        delete mixRequests[requestId];\\n    }\\n\\n    function _getOutputEdition(HeroEdition editionIn, uint256 randomValue) internal view returns (HeroEdition editionOut) {\\n        uint256 randomChance = randomValue % PERCENTS_SUM;\\n\\n        for (uint256 i = mixerConfigs[editionIn].length - 1; i > 0; i--) {\\n            uint256 checkChance = mixerConfigs[editionIn][i].chance;\\n            if (randomChance < checkChance) {\\n                return mixerConfigs[editionIn][i].edition;\\n            } else {\\n                randomChance = randomChance - checkChance;\\n            }\\n        }\\n        return mixerConfigs[editionIn][0].edition;\\n    }\\n\\n    function _getValidOutputTokenId(HeroEdition editionOut, uint256 randomValue) internal view returns (uint256 tokenId) {\\n        uint256[] memory randomArray = expandRandom(randomValue, editionToHeroIds[editionOut].length);\\n        for (uint256 i = 1; i < randomArray.length; i++) {\\n            uint256 randomIndex = randomArray[i] % editionToHeroIds[editionOut].length;\\n            tokenId = editionToHeroIds[editionOut][randomIndex];\\n            if (collection.totalSupply(tokenId) + 1 < collection.maxSupply(tokenId)) {\\n                return tokenId;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    // Helper functions\\n\\n    function isSameEditions(uint256[] memory _ids) internal view returns (bool) {\\n        HeroEdition _prevEdition = heroIdToEdition[_ids[0]];\\n        for (uint256 i = 1; i < _ids.length; i++) {\\n            HeroEdition _currentEdition = heroIdToEdition[_ids[0]];\\n            if (_prevEdition != _currentEdition) {\\n                return false;\\n            }\\n            _prevEdition = _currentEdition;\\n        }\\n        return true;\\n    }\\n\\n    function isConfigExists(HeroEdition _edition) internal view returns (bool) {\\n        return mixerConfigExists[_edition];\\n    }\\n\\n    function random() private returns (uint256) {\\n        randomNonce++;\\n        return uint256(keccak256(abi.encodePacked(block.number, block.timestamp, block.difficulty, _msgSender(), randomNonce)));\\n    }\\n\\n    function expandRandom(uint256 randomValue, uint256 n) internal pure returns (uint256[] memory expandedValues) {\\n        expandedValues = new uint256[](n);\\n        for (uint256 i = 0; i < n; i++) {\\n            expandedValues[i] = uint256(keccak256(abi.encode(randomValue, i)));\\n        }\\n        return expandedValues;\\n    }\\n\\n    function _getFilledArray(uint256 n, uint256 v) internal pure returns (uint256[] memory array) {\\n        array = new uint256[](n);\\n        for (uint256 i = 0; i < n; i++) {\\n            array[i] = v;\\n        }\\n        return array;\\n    }\\n\\n    function _transferHeroes(uint256[] memory _ids, address _to) internal {\\n        collection.safeBatchTransferFrom(address(this), _to, _ids, _getFilledArray(_ids.length, 1), bytes('0x0'));\\n    }\\n\\n    function _transferAllHeroes(address _to) internal {\\n        uint256[] memory ids = editionToHeroIds[HeroEdition.COMMON];\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 balance = collection.balanceOf(address(this), ids[i]);\\n            if (balance > 0) {\\n                collection.safeTransferFrom(address(this), _to, ids[i], balance, bytes('0x0'));\\n            }\\n        }\\n\\n        ids = editionToHeroIds[HeroEdition.RARE];\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 balance = collection.balanceOf(address(this), ids[i]);\\n            if (balance > 0) {\\n                collection.safeTransferFrom(address(this), _to, ids[i], balance, bytes('0x0'));\\n            }\\n        }\\n\\n        ids = editionToHeroIds[HeroEdition.EPIC];\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 balance = collection.balanceOf(address(this), ids[i]);\\n            if (balance > 0) {\\n                collection.safeTransferFrom(address(this), _to, ids[i], balance, bytes('0x0'));\\n            }\\n        }\\n    }\\n\\n    // Admin functions\\n\\n    /*\\n        Set mixer config, chances should be in increasing order\\n        \\n        For COMMON in\\n        - [EPIC,RARE,COMMON] [3700,36600,59700]\\n        For RARE in\\n        - [COMMON,EPIC,RARE] [9700,34700,55600]\\n        \\n        Sum should be eq DECIMAL_PRECISION       \\n    */\\n    function setMixerConfig(\\n        HeroEdition _in,\\n        HeroEdition[] memory _out,\\n        uint256[] memory _chances\\n    ) external onlyOwner {\\n        require(_out.length == _chances.length, 'CryptoKombatMixer: Params length mismatch');\\n\\n        uint256 sum;\\n        uint256 prevChance;\\n\\n        for (uint256 i = 0; i < _chances.length; i++) {\\n            require(_chances[i] > prevChance, 'CryptoKombatMixer: Chances should be in increasing order');\\n            prevChance = _chances[i];\\n            sum += _chances[i];\\n\\n            if (mixerConfigs[_in].length > i) {\\n                mixerConfigs[_in][i] = MixYield({ edition: _out[i], chance: _chances[i] });\\n            } else {\\n                mixerConfigs[_in].push(MixYield({ edition: _out[i], chance: _chances[i] }));\\n            }\\n        }\\n\\n        require(sum <= PERCENTS_SUM, 'CryptoKombatMixer: Chances sum exceed 100%');\\n\\n        if (!mixerConfigExists[_in]) {\\n            mixerConfigExists[_in] = true;\\n        }\\n\\n        emit MixerConfigSet(_in, _out, _chances);\\n    }\\n\\n    function setEditionToIdMapping(HeroEdition _edition, uint256[] memory _ids) external onlyOwner {\\n        require(_edition != HeroEdition.EMPTY, 'CryptoKombatMixer: Cannot set ids for EMPTY edition');\\n\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            heroIdToEdition[_ids[i]] = _edition;\\n        }\\n        editionToHeroIds[_edition] = _ids;\\n\\n        emit EditionToIdMappingSet(_edition, _ids);\\n    }\\n\\n    function addEditionToIdMapping(HeroEdition _edition, uint256 _id) external onlyOwner {\\n        require(_edition != HeroEdition.EMPTY, 'CryptoKombatMixer: Cannot set ids for EMPTY edition');\\n\\n        heroIdToEdition[_id] = _edition;\\n        editionToHeroIds[_edition].push(_id);\\n\\n        emit EditionToIdMappingAdded(_edition, _id);\\n    }\\n\\n    function recoverHeroes(uint256[] memory _ids) external onlyOwner {\\n        _transferHeroes(_ids, msg.sender);\\n    }\\n\\n    function recoverAllHeroes() external onlyOwner {\\n        _transferAllHeroes(msg.sender);\\n    }\\n\\n    function burnHeroesBatch(uint256[] memory _ids) external onlyOwner {\\n        _transferHeroes(_ids, DEAD_ADDRESS);\\n    }\\n\\n    function burnAllHeroes() external onlyOwner {\\n        _transferAllHeroes(DEAD_ADDRESS);\\n    }\\n}\\n\",\"keccak256\":\"0x066d9811a13455c26803d4d8382d685b2530f7212c10d466405e3083825b0867\",\"license\":\"MIT\"},\"contracts/interfaces/ICollection.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ICollection {\\n    function totalSupply(uint256 _id) external view returns (uint256);\\n\\n    function maxSupply(uint256 _id) external view returns (uint256);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function mint(\\n        address _to,\\n        uint256 _id,\\n        uint256 _quantity,\\n        bytes memory _data\\n    ) external;\\n\\n    function mintBatch(\\n        address _to,\\n        uint256[] memory _ids,\\n        uint256[] memory _quantities,\\n        bytes memory _data\\n    ) external;\\n\\n    function burn(\\n        address _from,\\n        uint256 _id,\\n        uint256 _quantity\\n    ) external;\\n\\n    function burnBatch(\\n        address _from,\\n        uint256[] memory _ids,\\n        uint256[] memory _quantities\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbe05b5b4c79372ce446be3cd8ce2156f7f6da358144696b4e11fa761d42983a7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063975589a8116100ad578063bd6982ce11610071578063bd6982ce146102c5578063edc1bd15146102e6578063f23a6e6114610329578063f2b15a4114610348578063f2fde38b1461035057600080fd5b8063975589a814610223578063a3a2581114610246578063a8d913ae14610259578063bace13351461027a578063bc197c811461028d57600080fd5b80636ec2a944116100f45780636ec2a944146101b9578063715018a6146101cc578063774e54c8146101d45780637de1e536146101e75780638da5cb5b1461021257600080fd5b806301ffc9a714610131578063335cea1814610159578063342057391461016e57806354c023e31461017657806357966eab146101a6575b600080fd5b61014461013f3660046127e6565b610363565b60405190151581526020015b60405180910390f35b61016c610167366004612793565b61039a565b005b61016c6103da565b6101996101843660046127ce565b60036020526000908152604090205460ff1681565b6040516101509190612b8d565b61016c6101b43660046128fb565b61040f565b61016c6101c7366004612793565b6105d0565b61016c610606565b61016c6101e2366004612793565b61063a565b6005546101fa906001600160a01b031681565b6040516001600160a01b039091168152602001610150565b6000546001600160a01b03166101fa565b61014461023136600461280e565b60026020526000908152604090205460ff1681565b61016c610254366004612947565b6109b6565b61026c610267366004612947565b610b14565b604051908152602001610150565b61016c610288366004612828565b610b45565b6102ac61029b36600461268a565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610150565b6102d86102d3366004612947565b611179565b604051610150929190612bc4565b61031b6102f43660046127ce565b6008602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b604051610150929190612b39565b6102ac610337366004612730565b63f23a6e6160e01b95945050505050565b61016c6111b9565b61016c61035e366004612669565b6111ee565b60006001600160e01b03198216630271189760e51b148061039457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000546001600160a01b031633146103cd5760405162461bcd60e51b81526004016103c490612bdf565b60405180910390fd5b6103d78133611286565b50565b6000546001600160a01b031633146104045760405162461bcd60e51b81526004016103c490612bdf565b61040d33611320565b565b6000546001600160a01b031633146104395760405162461bcd60e51b81526004016103c490612bdf565b600082600481111561045b57634e487b7160e01b600052602160045260246000fd5b14156104795760405162461bcd60e51b81526004016103c490612c14565b60005b81518110156105065782600360008484815181106104aa57634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002060006101000a81548160ff021916908360048111156104ef57634e487b7160e01b600052602160045260246000fd5b0217905550806104fe81612e0c565b91505061047c565b50806004600084600481111561052c57634e487b7160e01b600052602160045260246000fd5b600481111561054b57634e487b7160e01b600052602160045260246000fd5b8152602001908152602001600020908051906020019061056c9291906124ea565b508060405161057b9190612a6c565b60405180910390208260048111156105a357634e487b7160e01b600052602160045260246000fd5b6040517f36aba613eb3694c3753a05bf3442ff022f6cb16e782bd9761a052dad2b599aec90600090a35050565b6000546001600160a01b031633146105fa5760405162461bcd60e51b81526004016103c490612bdf565b6103d78161dead611286565b6000546001600160a01b031633146106305760405162461bcd60e51b81526004016103c490612bdf565b61040d6000611961565b805160031461069d5760405162461bcd60e51b815260206004820152602960248201527f43727970746f4b6f6d6261744d697865723a20496e636f727265637420696e706044820152680eae840d8cadccee8d60bb1b60648201526084016103c4565b6106a6816119b1565b6107095760405162461bcd60e51b815260206004820152602e60248201527f43727970746f4b6f6d6261744d697865723a20496e7075742065646974696f6e60448201526d7320617265206e6f742073616d6560901b60648201526084016103c4565b610754600360008360008151811061073157634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000205460ff16611aba565b6107b75760405162461bcd60e51b815260206004820152602e60248201527f43727970746f4b6f6d6261744d697865723a204d6978657220636f6e6669672060448201526d191bd95cc81b9bdd08195e1a5cdd60921b60648201526084016103c4565b60055481516001600160a01b0390911690632eb2c2d6903390309085906107df906001611b19565b6040518060400160405280600381526020016203078360ec1b8152506040518663ffffffff1660e01b815260040161081b959493929190612a96565b600060405180830381600087803b15801561083557600080fd5b505af1158015610849573d6000803e3d6000fd5b50506007805492509050600061085e83612e0c565b91905055506040518060600160405280336001600160a01b0316815260200160036000846000815181106108a257634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000205460ff1660048111156108df57634e487b7160e01b600052602160045260246000fd5b8152602090810183905260075460009081526008825260409020825181546001600160a01b039091166001600160a01b031982168117835592840151919283916001600160a81b03191617600160a01b83600481111561094f57634e487b7160e01b600052602160045260246000fd5b02179055506040820151805161096f9160018401916020909101906124ea565b505060075460405190915033907fe7c46debaef5a7b1120c52d0a106b71d796c5b6d2ed456c2728258d12a4279cd90600090a36007546103d7906109b1611bbe565b611c38565b6000546001600160a01b031633146109e05760405162461bcd60e51b81526004016103c490612bdf565b6000826004811115610a0257634e487b7160e01b600052602160045260246000fd5b1415610a205760405162461bcd60e51b81526004016103c490612c14565b6000818152600360205260409020805483919060ff19166001836004811115610a5957634e487b7160e01b600052602160045260246000fd5b021790555060046000836004811115610a8257634e487b7160e01b600052602160045260246000fd5b6004811115610aa157634e487b7160e01b600052602160045260246000fd5b8152602080820192909252604001600090812080546001810182559082529190200181905580826004811115610ae757634e487b7160e01b600052602160045260246000fd5b6040517f5789842d8b93af6faed85ab793032aa86657a55244b60959791ca8adf2fc70ab90600090a35050565b60046020528160005260406000208181548110610b3057600080fd5b90600052602060002001600091509150505481565b6000546001600160a01b03163314610b6f5760405162461bcd60e51b81526004016103c490612bdf565b8051825114610bd25760405162461bcd60e51b815260206004820152602960248201527f43727970746f4b6f6d6261744d697865723a20506172616d73206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016103c4565b60008060005b8351811015610fc35781848281518110610c0257634e487b7160e01b600052603260045260246000fd5b602002602001015111610c7d5760405162461bcd60e51b815260206004820152603860248201527f43727970746f4b6f6d6261744d697865723a204368616e6365732073686f756c60448201527f6420626520696e20696e6372656173696e67206f72646572000000000000000060648201526084016103c4565b838181518110610c9d57634e487b7160e01b600052603260045260246000fd5b60200260200101519150838181518110610cc757634e487b7160e01b600052603260045260246000fd5b602002602001015183610cda9190612cbc565b92508060016000886004811115610d0157634e487b7160e01b600052602160045260246000fd5b6004811115610d2057634e487b7160e01b600052602160045260246000fd5b81526020810191909152604001600020541115610e7f576040518060400160405280868381518110610d6257634e487b7160e01b600052603260045260246000fd5b60200260200101516004811115610d8957634e487b7160e01b600052602160045260246000fd5b8152602001858381518110610dae57634e487b7160e01b600052603260045260246000fd5b602002602001015181525060016000886004811115610ddd57634e487b7160e01b600052602160045260246000fd5b6004811115610dfc57634e487b7160e01b600052602160045260246000fd5b81526020019081526020016000208281548110610e2957634e487b7160e01b600052603260045260246000fd5b6000918252602090912082516002909202018054909190829060ff19166001836004811115610e6857634e487b7160e01b600052602160045260246000fd5b021790555060208201518160010155905050610fb1565b60016000876004811115610ea357634e487b7160e01b600052602160045260246000fd5b6004811115610ec257634e487b7160e01b600052602160045260246000fd5b81526020019081526020016000206040518060400160405280878481518110610efb57634e487b7160e01b600052603260045260246000fd5b60200260200101516004811115610f2257634e487b7160e01b600052602160045260246000fd5b8152602001868481518110610f4757634e487b7160e01b600052603260045260246000fd5b60209081029190910181015190915282546001818101855560009485529190932082516002909402018054929390929091839160ff191690836004811115610f9f57634e487b7160e01b600052602160045260246000fd5b02179055506020820151816001015550505b80610fbb81612e0c565b915050610bd8565b50610fd06003600a612d17565b610fdb906064612dbf565b82111561103d5760405162461bcd60e51b815260206004820152602a60248201527f43727970746f4b6f6d6261744d697865723a204368616e6365732073756d20656044820152697863656564203130302560b01b60648201526084016103c4565b6002600086600481111561106157634e487b7160e01b600052602160045260246000fd5b600481111561108057634e487b7160e01b600052602160045260246000fd5b815260208101919091526040016000205460ff166110fd576001600260008760048111156110be57634e487b7160e01b600052602160045260246000fd5b60048111156110dd57634e487b7160e01b600052602160045260246000fd5b81526020810191909152604001600020805460ff19169115159190911790555b8260405161110b9190612a6c565b6040518091039020846040516111219190612a2f565b604051809103902086600481111561114957634e487b7160e01b600052602160045260246000fd5b6040517f94255ac2323f7bbf8e1d32727a195533d9cd12672fd19507756f10391251356d90600090a45050505050565b6001602052816000526040600020818154811061119557600080fd5b60009182526020909120600290910201805460019091015460ff9091169250905082565b6000546001600160a01b031633146111e35760405162461bcd60e51b81526004016103c490612bdf565b61040d61dead611320565b6000546001600160a01b031633146112185760405162461bcd60e51b81526004016103c490612bdf565b6001600160a01b03811661127d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103c4565b6103d781611961565b60055482516001600160a01b0390911690632eb2c2d6903090849086906112ae906001611b19565b6040518060400160405280600381526020016203078360ec1b8152506040518663ffffffff1660e01b81526004016112ea959493929190612a96565b600060405180830381600087803b15801561130457600080fd5b505af1158015611318573d6000803e3d6000fd5b505050505050565b6004600081815260209182527f1a1e6821cde7d0159c0d293177871e09677b4e42307c7db3ba94f8648a5a050f80546040805182860281018601909152818152929383018282801561139157602002820191906000526020600020905b81548152602001906001019080831161137d575b5050505050905060005b81518110156115345760055482516000916001600160a01b03169062fdd58e9030908690869081106113dd57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016114169291906001600160a01b03929092168252602082015260400190565b60206040518083038186803b15801561142e57600080fd5b505afa158015611442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114669190612970565b905080156115215760055483516001600160a01b039091169063f242432a90309087908790879081106114a957634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518060400160405280600381526020016203078360ec1b8152506040518663ffffffff1660e01b81526004016114ee959493929190612af4565b600060405180830381600087803b15801561150857600080fd5b505af115801561151c573d6000803e3d6000fd5b505050505b508061152c81612e0c565b91505061139b565b506003600052600460209081527f2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa080546040805182850281018501909152818152928301828280156115a557602002820191906000526020600020905b815481526020019060010190808311611591575b5050505050905060005b81518110156117485760055482516000916001600160a01b03169062fdd58e9030908690869081106115f157634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b815260040161162a9291906001600160a01b03929092168252602082015260400190565b60206040518083038186803b15801561164257600080fd5b505afa158015611656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167a9190612970565b905080156117355760055483516001600160a01b039091169063f242432a90309087908790879081106116bd57634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518060400160405280600381526020016203078360ec1b8152506040518663ffffffff1660e01b8152600401611702959493929190612af4565b600060405180830381600087803b15801561171c57600080fd5b505af1158015611730573d6000803e3d6000fd5b505050505b508061174081612e0c565b9150506115af565b506002600052600460209081527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a780546040805182850281018501909152818152928301828280156117b957602002820191906000526020600020905b8154815260200190600101908083116117a5575b5050505050905060005b815181101561195c5760055482516000916001600160a01b03169062fdd58e90309086908690811061180557634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b815260040161183e9291906001600160a01b03929092168252602082015260400190565b60206040518083038186803b15801561185657600080fd5b505afa15801561186a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188e9190612970565b905080156119495760055483516001600160a01b039091169063f242432a90309087908790879081106118d157634e487b7160e01b600052603260045260246000fd5b6020026020010151856040518060400160405280600381526020016203078360ec1b8152506040518663ffffffff1660e01b8152600401611916959493929190612af4565b600060405180830381600087803b15801561193057600080fd5b505af1158015611944573d6000803e3d6000fd5b505050505b508061195481612e0c565b9150506117c3565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060036000846000815181106119d957634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000205460ff16905060015b8351811015611ab05760006003600086600081518110611a2c57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182528101919091526040016000205460ff169050806004811115611a6c57634e487b7160e01b600052602160045260246000fd5b836004811115611a8c57634e487b7160e01b600052602160045260246000fd5b14611a9c57506000949350505050565b915080611aa881612e0c565b9150506119fc565b5060019392505050565b600060026000836004811115611ae057634e487b7160e01b600052602160045260246000fd5b6004811115611aff57634e487b7160e01b600052602160045260246000fd5b815260208101919091526040016000205460ff1692915050565b60608267ffffffffffffffff811115611b4257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611b6b578160200160208202803683370190505b50905060005b83811015611bb75782828281518110611b9a57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611baf81612e0c565b915050611b71565b5092915050565b6006805460009182611bcf83612e0c565b9190505550434244611bde3390565b6006546040805160208101969096528501939093526060808501929092526bffffffffffffffffffffffff19911b166080830152609482015260b4016040516020818303038152906040528051906020012060001c905090565b600082815260086020908152604080832081516060810190925280546001600160a01b03811683529192909190830190600160a01b900460ff166004811115611c9157634e487b7160e01b600052602160045260246000fd5b6004811115611cb057634e487b7160e01b600052602160045260246000fd5b815260200160018201805480602002602001604051908101604052809291908181526020018280548015611d0357602002820191906000526020600020905b815481526020019060010190808311611cef575b50505050508152505090506000611d1e826020015184611f21565b90506000611d2c828561217b565b90508015611e08576005548351604080518082018252600381526203078360ec1b6020820152905163731133e960e01b81526001600160a01b039093169263731133e992611d839290918691600191600401612b56565b600060405180830381600087803b158015611d9d57600080fd5b505af1158015611db1573d6000803e3d6000fd5b505050508483600001516001600160a01b03167f383137ba3994fdb5820b4488eb30c894e8d0b1b27f7dd4f7cf6d2adddb9b512185602001518585604051611dfb93929190612b9b565b60405180910390a3611eee565b6005548351604085015180516001600160a01b0390931692632eb2c2d69230929091611e35906001611b19565b6040518060400160405280600381526020016203078360ec1b8152506040518663ffffffff1660e01b8152600401611e71959493929190612a96565b600060405180830381600087803b158015611e8b57600080fd5b505af1158015611e9f573d6000803e3d6000fd5b505050508483600001516001600160a01b03167f666e8c3b80992ccf45eb0ff41e79ac6bec6ccdb4b4df641cf1c4778b5c1dce708560200151604051611ee59190612b8d565b60405180910390a35b600085815260086020526040812080546001600160a81b031916815590611f186001830182612535565b50505050505050565b600080611f306003600a612d17565b611f3b906064612dbf565b611f459084612e27565b905060006001806000876004811115611f6e57634e487b7160e01b600052602160045260246000fd5b6004811115611f8d57634e487b7160e01b600052602160045260246000fd5b8152602081019190915260400160002054611fa89190612dde565b90505b80156120ed57600060016000876004811115611fd757634e487b7160e01b600052602160045260246000fd5b6004811115611ff657634e487b7160e01b600052602160045260246000fd5b8152602001908152602001600020828154811061202357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600101549050808310156120ce576001600087600481111561206357634e487b7160e01b600052602160045260246000fd5b600481111561208257634e487b7160e01b600052602160045260246000fd5b815260200190815260200160002082815481106120af57634e487b7160e01b600052603260045260246000fd5b600091825260209091206002909102015460ff16935061039492505050565b6120d88184612dde565b925050806120e581612df5565b915050611fab565b506001600085600481111561211257634e487b7160e01b600052602160045260246000fd5b600481111561213157634e487b7160e01b600052602160045260246000fd5b815260200190815260200160002060008154811061215f57634e487b7160e01b600052603260045260246000fd5b600091825260209091206002909102015460ff16949350505050565b6000806121db83600460008760048111156121a657634e487b7160e01b600052602160045260246000fd5b60048111156121c557634e487b7160e01b600052602160045260246000fd5b8152602081019190915260400160002054612420565b905060015b81518110156124155760006004600087600481111561220f57634e487b7160e01b600052602160045260246000fd5b600481111561222e57634e487b7160e01b600052602160045260246000fd5b81526020019081526020016000208054905083838151811061226057634e487b7160e01b600052603260045260246000fd5b60200260200101516122729190612e27565b90506004600087600481111561229857634e487b7160e01b600052602160045260246000fd5b60048111156122b757634e487b7160e01b600052602160045260246000fd5b815260200190815260200160002081815481106122e457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546005546040516321a7dd6560e21b8152600481018390529195506001600160a01b03169063869f75949060240160206040518083038186803b15801561233557600080fd5b505afa158015612349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236d9190612970565b60055460405163bd85b03960e01b8152600481018790526001600160a01b039091169063bd85b0399060240160206040518083038186803b1580156123b157600080fd5b505afa1580156123c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e99190612970565b6123f4906001612cbc565b101561240257505050610394565b508061240d81612e0c565b9150506121e0565b506000949350505050565b60608167ffffffffffffffff81111561244957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612472578160200160208202803683370190505b50905060005b82811015611bb75760408051602081018690529081018290526060016040516020818303038152906040528051906020012060001c8282815181106124cd57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806124e281612e0c565b915050612478565b828054828255906000526020600020908101928215612525579160200282015b8281111561252557825182559160200191906001019061250a565b5061253192915061254f565b5090565b50805460008255906000526020600020908101906103d791905b5b808211156125315760008155600101612550565b80356001600160a01b038116811461257b57600080fd5b919050565b600082601f830112612590578081fd5b813560206125a56125a083612c98565b612c67565b80838252828201915082860187848660051b89010111156125c4578586fd5b855b858110156125e2578135845292840192908401906001016125c6565b5090979650505050505050565b600082601f8301126125ff578081fd5b813567ffffffffffffffff81111561261957612619612e5d565b61262c601f8201601f1916602001612c67565b818152846020838601011115612640578283fd5b816020850160208301379081016020019190915292915050565b80356005811061257b57600080fd5b60006020828403121561267a578081fd5b61268382612564565b9392505050565b600080600080600060a086880312156126a1578081fd5b6126aa86612564565b94506126b860208701612564565b9350604086013567ffffffffffffffff808211156126d4578283fd5b6126e089838a01612580565b945060608801359150808211156126f5578283fd5b61270189838a01612580565b93506080880135915080821115612716578283fd5b50612723888289016125ef565b9150509295509295909350565b600080600080600060a08688031215612747578081fd5b61275086612564565b945061275e60208701612564565b93506040860135925060608601359150608086013567ffffffffffffffff811115612787578182fd5b612723888289016125ef565b6000602082840312156127a4578081fd5b813567ffffffffffffffff8111156127ba578182fd5b6127c684828501612580565b949350505050565b6000602082840312156127df578081fd5b5035919050565b6000602082840312156127f7578081fd5b81356001600160e01b031981168114612683578182fd5b60006020828403121561281f578081fd5b6126838261265a565b60008060006060848603121561283c578283fd5b6128458461265a565b925060208085013567ffffffffffffffff80821115612862578485fd5b818701915087601f830112612875578485fd5b81356128836125a082612c98565b8082825285820191508585018b878560051b88010111156128a2578889fd5b8895505b838610156128cb576128b78161265a565b8352600195909501949186019186016128a6565b509650505060408701359250808311156128e3578384fd5b50506128f186828701612580565b9150509250925092565b6000806040838503121561290d578182fd5b6129168361265a565b9150602083013567ffffffffffffffff811115612931578182fd5b61293d85828601612580565b9150509250929050565b60008060408385031215612959578182fd5b6129628361265a565b946020939093013593505050565b600060208284031215612981578081fd5b5051919050565b6000815180845260208085019450808401835b838110156129b75781518752958201959082019060010161299b565b509495945050505050565b60008151808452815b818110156129e7576020818501810151868301820152016129cb565b818111156129f85782602083870101525b50601f01601f19169290920160200192915050565b60058110612a2b57634e487b7160e01b600052602160045260246000fd5b9052565b815160009082906020808601845b83811015612a6057612a50858351612a0d565b9382019390820190600101612a3d565b50929695505050505050565b815160009082906020808601845b83811015612a6057815185529382019390820190600101612a7a565b6001600160a01b0386811682528516602082015260a060408201819052600090612ac290830186612988565b8281036060840152612ad48186612988565b90508281036080840152612ae881856129c2565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612b2e908301846129c2565b979650505050505050565b6001600160a01b0383168152604081016126836020830184612a0d565b60018060a01b0385168152836020820152826040820152608060608201526000612b8360808301846129c2565b9695505050505050565b602081016103948284612a0d565b60608101612ba98286612a0d565b612bb66020830185612a0d565b826040830152949350505050565b60408101612bd28285612a0d565b8260208301529392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526033908201527f43727970746f4b6f6d6261744d697865723a2043616e6e6f742073657420696460408201527239903337b91022a6a82a2c9032b234ba34b7b760691b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715612c9057612c90612e5d565b604052919050565b600067ffffffffffffffff821115612cb257612cb2612e5d565b5060051b60200190565b60008219821115612ccf57612ccf612e47565b500190565b600181815b80851115612d0f578160001904821115612cf557612cf5612e47565b80851615612d0257918102915b93841c9390800290612cd9565b509250929050565b60006126838383600082612d2d57506001610394565b81612d3a57506000610394565b8160018114612d505760028114612d5a57612d76565b6001915050610394565b60ff841115612d6b57612d6b612e47565b50506001821b610394565b5060208310610133831016604e8410600b8410161715612d99575081810a610394565b612da38383612cd4565b8060001904821115612db757612db7612e47565b029392505050565b6000816000190483118215151615612dd957612dd9612e47565b500290565b600082821015612df057612df0612e47565b500390565b600081612e0457612e04612e47565b506000190190565b6000600019821415612e2057612e20612e47565b5060010190565b600082612e4257634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122021961d5e99bdfc97b6fe71c0a4cf36d6c9da81c854d208712e9d2e177357f26864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 857,
        "contract": "contracts/CryptoKombatMixer.sol:CryptoKombatMixer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4548,
        "contract": "contracts/CryptoKombatMixer.sol:CryptoKombatMixer",
        "label": "mixerConfigs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_enum(HeroEdition)4526,t_array(t_struct(MixYield)4541_storage)dyn_storage)"
      },
      {
        "astId": 4553,
        "contract": "contracts/CryptoKombatMixer.sol:CryptoKombatMixer",
        "label": "mixerConfigExists",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_enum(HeroEdition)4526,t_bool)"
      },
      {
        "astId": 4558,
        "contract": "contracts/CryptoKombatMixer.sol:CryptoKombatMixer",
        "label": "heroIdToEdition",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_enum(HeroEdition)4526)"
      },
      {
        "astId": 4564,
        "contract": "contracts/CryptoKombatMixer.sol:CryptoKombatMixer",
        "label": "editionToHeroIds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_enum(HeroEdition)4526,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4567,
        "contract": "contracts/CryptoKombatMixer.sol:CryptoKombatMixer",
        "label": "collection",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ICollection)6525"
      },
      {
        "astId": 4582,
        "contract": "contracts/CryptoKombatMixer.sol:CryptoKombatMixer",
        "label": "randomNonce",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4584,
        "contract": "contracts/CryptoKombatMixer.sol:CryptoKombatMixer",
        "label": "mixRequestId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4589,
        "contract": "contracts/CryptoKombatMixer.sol:CryptoKombatMixer",
        "label": "mixRequests",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(MixRequest)4535_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(MixYield)4541_storage)dyn_storage": {
        "base": "t_struct(MixYield)4541_storage",
        "encoding": "dynamic_array",
        "label": "struct CryptoKombatMixer.MixYield[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICollection)6525": {
        "encoding": "inplace",
        "label": "contract ICollection",
        "numberOfBytes": "20"
      },
      "t_enum(HeroEdition)4526": {
        "encoding": "inplace",
        "label": "enum CryptoKombatMixer.HeroEdition",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(MixRequest)4535_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct CryptoKombatMixer.MixRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(MixRequest)4535_storage"
      },
      "t_mapping(t_enum(HeroEdition)4526,t_array(t_struct(MixYield)4541_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(HeroEdition)4526",
        "label": "mapping(enum CryptoKombatMixer.HeroEdition => struct CryptoKombatMixer.MixYield[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(MixYield)4541_storage)dyn_storage"
      },
      "t_mapping(t_enum(HeroEdition)4526,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(HeroEdition)4526",
        "label": "mapping(enum CryptoKombatMixer.HeroEdition => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_enum(HeroEdition)4526,t_bool)": {
        "encoding": "mapping",
        "key": "t_enum(HeroEdition)4526",
        "label": "mapping(enum CryptoKombatMixer.HeroEdition => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(HeroEdition)4526)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum CryptoKombatMixer.HeroEdition)",
        "numberOfBytes": "32",
        "value": "t_enum(HeroEdition)4526"
      },
      "t_struct(MixRequest)4535_storage": {
        "encoding": "inplace",
        "label": "struct CryptoKombatMixer.MixRequest",
        "members": [
          {
            "astId": 4528,
            "contract": "contracts/CryptoKombatMixer.sol:CryptoKombatMixer",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4531,
            "contract": "contracts/CryptoKombatMixer.sol:CryptoKombatMixer",
            "label": "editionIn",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(HeroEdition)4526"
          },
          {
            "astId": 4534,
            "contract": "contracts/CryptoKombatMixer.sol:CryptoKombatMixer",
            "label": "inIds",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MixYield)4541_storage": {
        "encoding": "inplace",
        "label": "struct CryptoKombatMixer.MixYield",
        "members": [
          {
            "astId": 4538,
            "contract": "contracts/CryptoKombatMixer.sol:CryptoKombatMixer",
            "label": "edition",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(HeroEdition)4526"
          },
          {
            "astId": 4540,
            "contract": "contracts/CryptoKombatMixer.sol:CryptoKombatMixer",
            "label": "chance",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}